# This simulation study aims to compare ivd to HLM when the
# sample size per school is small and the number of students
# is unequal across units.
# The transformation presented in Raudenbush & Bryk (1987)
# aims to improve the estimation of dispersion by accounting for the
# degrees of freedom

## 0 Load in required packages ----

library(dplyr)
library(R2jags)
library(metafor)
library(lme4)

### Load in the required helper functions
source("R/helpers.R")

## Data generating function. Here we generate data differently from study 1
## because now we are intentionally creating schools with different
## number of students

sim_data <- function(n_students, n_schools) {

  sample_size = rpois(n_schools, lambda = n_students - 2) + 2 # ensure minimum of 2 students

  df = data.frame(
    school_id = rep(1:n_schools, sample_size),
    student_id = unlist(lapply(sample_size, function(n) seq_len(n)))
  )

  return(df)
}

## 1 Simulation loop -----

reps = 100
results_list <- list()

## parameters are fixed and only sample size and prob of atypical
## variability will be varied
sim_conditions_grid = expand.grid(
  n_students = c(10, 30),
  n_schools = c(25, 50),
  loc_int = 0,
  loc_int_sd  = 0.3,
  scl_int = 0,
  p_slab = c(0)
)

# We specify the scale random effects' sd such that it is zero if variability
# is homogeneous (p_slab == 0) or 0.3 (a small effect size), otherwise
sim_conditions_grid$scl_int_sd <- ifelse(sim_conditions_grid$p_slab == 0, 0, 0.3)

for (i in 1:nrow(sim_conditions_grid)) {
  params <- sim_conditions_grid[i, ]

  cat("Running condition:", i, "/", nrow(sim_conditions_grid), "\n")
  print(params)

  for (rep in 1:reps) {
     cat(".")

     ## generate data from simulation parameters
     d <- sim_data(params$n_students, params$n_schools)

     ## total sample size
     N <- nrow(d)

     ## id of schools in the slab
     is_slab <- sample(params$n_schools, params$p_slab * params$n_schools)

     ## sample the location and scale random effects
     u <- params$loc_int_sd * rnorm(params$n_schools, 0, 1)
     t <- params$scl_int_sd * rnorm(params$p_slab*params$n_schools, 0, 1)

     ## determine the schools with unusual variability
     is_slab <- sample(params$n_schools, params$p_slab * params$n_schools)

     ## location effects
     rand_int_loc <- u[d$school_id]
     linpred <- params$loc_int + rand_int_loc

     ## scale effects
     rand_int_scl <- numeric(params$n_schools)
     rand_int_scl[is_slab] = t

     dispersion <- exp(params$scl_int + rand_int_scl)

     y_residuals <- rnorm(N, 0, dispersion[d$school_id] )
     y <- linpred + y_residuals

     d$y <- y

     P_slab <- length(is_slab)
     N_total <- params$n_schools
     N_baseline <- N_total - P_slab

     ## Fit JAGS ivd model ----
     d$intercept <- 1

     jags_data <- list(y = d$y,
                       unit = d$school_id,
                       N = length(d$y),
                       X = matrix(d$intercept, ncol = 1),
                       P = 1,
                       J = length(unique(d$school_id)))

     parameters <- c("beta", "s_beta_0", "s_tau_0", "gamma", "precision_j")

     fit_jags <- jags.parallel(jags_data,
                               parameters.to.save = parameters,
                               model.file = "models/SpikeSlab.bug",
                               n.iter = 5000,
                               n.chains = 4
                               )

     ## JAGS samples
     gamma_samples <- fit_jags$BUGSoutput$sims.list$gamma
     pip <- colMeans(gamma_samples)
     schoolid <- unique(d$school_id)

     ## extract to level 2
     df_pip <- data.frame(school = schoolid, pip = pip )
     df_pip <- df_pip[order(df_pip$pip), ]
     df_pip$ordered <- 1:nrow(df_pip)

     flagged_ids <- schoolid[pip >= .75]

     ## Fit two-stage HLM ---
     fit_lmer <- lmer(y ~ 1 + (1 | school_id), data = d)
     stage2_data <- data.frame(school_id = factor(1:params$n_schools))
     stage2_data$s_j <- tapply(residuals(fit_lmer), d$school, sd)
     stage2_data$n_j <- tapply(d$y, d$school, length)
     stage2_data$p <- 1 # number of predictors
     stage2_data$df_j <- stage2_data$n_j - stage2_data$p
     ## Apply the transformation from R&B (1987)
     stage2_data$d_j <- log(stage2_data$s_j) + 1 / (2 * stage2_data$df_j)
     ## Define the known sampling variance and SE
     stage2_data$v_j <- 1 / (2 * stage2_data$df_j)

     fit_metafor <- rma.uni(
       yi = as.vector(stage2_data$d_j),
       vi = as.vector(stage2_data$v_j),
       method = "REML"
     )


     delta_hat_metafor <- fit_metafor$b
     var_u_i_metafor <- fit_metafor$tau2
     blup_estimates <- blup(fit_metafor)
     Zi_metafor <- blup_estimates$pred / blup_estimates$se
     metafor_flagged_empirical <- qq_outside(Zi_metafor)

     tp_hlm <- sum(metafor_flagged_empirical %in% is_slab)
     fp_hlm <- sum(metafor_flagged_empirical %in% schoolid[!schoolid %in% is_slab])
     fn_hlm <- P_slab - tp_hlm
     tn_hlm <- N_baseline - fp_hlm

     tp_ivd <- sum(flagged_ids %in% is_slab)
     fp_ivd <- sum(flagged_ids %in% schoolid[!schoolid %in% is_slab])
     fn_ivd <- P_slab - tp_ivd
     tn_ivd <- N_baseline - fp_ivd


     results_list[[length(results_list) + 1]] <- data.frame(
       condition_id = i, replication = rep,
       params,
       ivd_sd_scl_Intc = fit_jags$BUGSoutput$mean$s_tau_0,
       hlm_sd_scl_Intc = sqrt(fit_metafor$tau2),
       tp_hlm, fp_hlm, fn_hlm, tn_hlm,
       tp_ivd, fp_ivd, fn_ivd, tn_ivd
     )

  }

  cat("\n")

  results_df <- do.call(rbind, results_list)
}

saveRDS(results_df, "/output/02_simulation_unbalanced_results0.rds")
